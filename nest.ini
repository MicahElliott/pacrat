# pacrat nest INI config file

# Likely don't need this since pacrat can install it automatically
[eget] # bootstrap
doc     = 'easily install prebuilt binaries from GitHub (bootstrapper) (https://github.com/zyedidia/eget)'
uni = 'curl https://zyedidia.github.io/eget.sh | sh'
post = "mv eget ~/.local/bin/"

[xcode]
doc = 'MacOS compiler etc tooling'
osfam = 'macos' # or keyname: only
macos = 'xcode-select --install'

[dev-tooling]
doc = 'essential compilation etc tools'
cmd = 'cc'
apt = 'build-essential'
# dnf = sudo dnf groupinstall "Development Tools" "Development Libraries"

# [homebrew]
# doc = 'the missing package manager for macOS'
# osfam = 'macos'
# depcmds = 'cc'
# macos = '/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"'
# depinstruct = 'Get Xcode CLT from: https://developer.apple.com/download/all/'

[sdkman]
doc = 'manage multiple SDKs (https://sdkman.io/)'
# file = '~/.sdkman' # TODO
file = "$HOME/.sdkman" # TODO
uni = 'curl -s "https://get.sdkman.io" | bash'
upgrade = 'sdk selfupdate force'
instruct = 'This needs to be active now and added to your shell init file: source "$HOME/.sdkman/bin/sdkman-init.sh"'
# cmd = 'sdk'
# path = '~/.sdkman/'

[java]
cmd = 'java'
uni  = 'source ~/.sdkman/bin/sdkman-init.sh && sdk install java 21.0.5-tem'
verget = 'java -version 2>&1| head -1 | cut -f3 -d" "'
# dnf = 'java-latest-openjdk-devel'
# brew = 'java'

[clojure]
doc = 'a robust, practical, and fast programming language (https://clojure.org/)'
cmd = 'clojure'
depcmds = 'java'
brew = 'clojure/tools/clojure'
linux = 'curl -L -O https://github.com/clojure/brew-install/releases/latest/download/linux-install.sh && chmod +x linux-install.sh && sudo ./linux-install.sh'
vermin = '1.11'
verget = 'clojure -e "(clojure-version)"' 
# verget = 'clojure -e "(let [{:keys [major minor incremental]} *clojure-version*] (println (str major \\. minor \\. incremental)))"' 

[babashka]
doc  = 'native, fast starting Clojure interpreter for scripting (https://github.com/babashka/babashka)'
cmd  = 'bb'
eget = 'babashka/babashka'

[bbin]
doc =     'babashka bbin installer (https://github.com/babashka/bbin)'
depcmds = 'bb'
uni = 'curl -o- -L https://raw.githubusercontent.com/babashka/bbin/v0.2.4/bbin > ~/.local/bin/bbin && chmod +x ~/.local/bin/bbin'
verget  = 'bbin --version | cut -f2 -d" "'
vermin  = '0.2.0'
# deppacs = 'babashka'
# cmd =     'bbin'
# brew =    'babashka/brew/bbin'
# linux =   'curl -o- -L https://raw.githubusercontent.com/babashka/bbin/v0.2.4/bbin > ~/.local/bin/bbin && chmod +x ~/.local/bin/bbin'

[cljrep]
doc     = 'run fast Clojure unit tests (https://github.com/eraserhd/rep)'
cmd     = rep
depcmds = 'cc'
clone   = 'https://github.com/eraserhd/rep'
post  = 'cc -g -O2 -o rep rep.c && cp rep ~/.local/bin'
# build   = 'cc -g -O2 -e rep rep.c'

[gnuutils]
osfam = macos # redhat bsd debian arch 
doc   = 'various GNU utils for macos (already on any linux)'
cmd   = 'ggrep'
brew  = 'coreutils findutils gnu-tar gnu-sed gawk gnutls gnu-indent gnu-getopt grep gdate'

[ecpg]
doc  = 'Postgres FE for sql linting (https://www.postgresql.org/docs/current/app-ecpg.html)'
brew = 'libpq'
dnf  = 'libecpg-devel'
apt  = 'libecpg-dev'
# cmd =  'ecpg'

[pv]
doc = 'terminal pipe viewer'
# anypac = 'pv'
# cmd = 'pv'

[clj-kondo]
doc    = 'static analyzer and linter for Clojure code that sparks joy (https://github.com/clj-kondo/clj-kondo)'
eget   = 'clj-kondo/clj-kondo'
vermin = '2024.11.14'
# details = 'https://github.com/clj-kondo/clj-kondo' # inferred
# cmd =     'clj-kondo'
# linux =   'curl -sLO https://raw.githubusercontent.com/clj-kondo/clj-kondo/master/script/install-clj-kondo && chmod +x install-clj-kondo && ./install-clj-kondo'
# brew =    'borkdude/brew/clj-kondo'
# verget =  'clj-kondo --version | cut -f2 -d" "'

[podman]
doc = 'manage containers, pods, and images (https://podman.io/)'
# anypac = 'podman'
# brew = 'podman'
# apt = 'podman'
# fedora comes with podman already installed

# [postgresql]
# docker = 

[cljsplint]
doc = 'a Clojure linter focused on style and code shape'
details = 'repo site: https://github.com/NoahTheDuke/splint'
cmd = 'splint'
depcmds = 'bbin'
uni = 'bbin install io.github.noahtheduke/splint'
vermin = '1.10.1'
path = '~/.local/bin'

[graalvm]
doc = 'compile fast binaries'
uni = 'source ~/.sdkman/bin/sdkman-init.sh && sdk install java 23.0.1-graalce'
path0 = '~/src/graalvm/bin'
# Set GRAALVM_HOME to the unpacked archive or add $GRAALVM_HOME/bin to your path

# [cljfmt]
# doc = 'Clojure formatter built with GraalVM'
# cmd = 'cljfmt'
# clone = 'https://github.com/bsless/cljfmt-graalvm'
# post = './script/compile'
# # post = 'cd cljfmt-graalvm && ./script/compile'

[just]
doc = 'a command runner (https://just.systems)'
# details = 'https://just.systems'
# cmd = 'just'
# anypac = 'just'
# With pkg these become redundant:
# brew 'just'
# dnf 'just'
# apt 'just'
# pkg 'just'
# nix 'nixos.just' # nix-env -iA just

# [awscli]
# doc = 'AWS CLI tools for S3 etc'
# cmd = 'aws'
# dnf = 'awscli2'
# brew = 'awscli'

[awless]
eget 'wallix/awless'

[pgmig]
doc =     'standalone postgresql migration runner (https://github.com/leafclick/pgmig)'
cmd =     'pgmig'
eget = 'leafclick/pgmig'
vermin =  '0.7.1'
# linux =   'wget https://github.com/leafclick/pgmig/releases/download/v0.7.1/pgmig-0.7.1-linux-amd64.zip'
# macos =   'wget https://github.com/leafclick/pgmig/releases/download/v0.7.1/pgmig-0.7.1-macos_x64.zip'
# install = 'unzip pgmig-*.zip && mv pgmig ~/.local/bin'
# path =    '~/.local/bin'

[direnv]
doc = 'unclutter your .profile (http://direnv.net/)'

[ngrok]
cmd = 'ngrok'
manual = 'Log in and download manually from: https://dashboard.ngrok.com/get-started/setup/'

[captain]
doc = 'a simpler approach to git-hook management (https://github.com/MicahElliott/captain)'
cmd = 'capt'
eget = 'micahelliott/captain'
instruct = 'cd your-project-root && git config core.hooksPath .capt/hooks' # To finish setup, now run: ...
# clone = 'https://github.com/MicahElliott/captain' # or let `gh:` prefix be implicit
# post = 'cp bin/* ~/.local/bin'
# path = 'captain/bin' # assune under ~/src/clones or $PACRAT_CLONE
# depcmds = 'macos:gdate' # simpler, doesn't need to build dependency tree
# deppacs = 'gnuutils' # could just assume deps are listed in order in this file, but then this isn't even needed
# clone = 'gh:MicahElliott/captain' # or let `gh:` prefix be implicit
# clone = 'local:~/proj/captain' # ugh, need a user override??

# [jenv]
# doc = 'manage your Java environment (https://www.jenv.be/)'
# clone = https://github.com/jenv/jenv.git
# clonedest = '~/.jenv' # TODO

[chruby]
doc = 'change the current Ruby (https://github.com/postmodern/chruby)'
cmd = 'chruby-exec'
brew = 'chruby'
uni = 'wget https://github.com/postmodern/chruby/releases/download/v0.3.9/chruby-0.3.9.tar.gz && tar -xzvf chruby-0.3.9.tar.gz && cd chruby-0.3.9/ && sudo make install'
instruct = 'General: source /usr/local/share/chruby/chruby.sh ; MacOS: source $HOMEBREW_PREFIX/opt/chruby/share/chruby/chruby.sh'
# fedora = 'sudo dnf copr enable postmodern/chruby'
# dnf = 'chruby'

# [rbenv]
# doc = 'manage your appâ€™s Ruby environment (https://github.com/rbenv/rbenv)'
# 
# [ruby-build]
# doc = 'download, compile, and install Ruby (https://github.com/rbenv/ruby-build)'

[ruby-install]
doc = 'install Ruby, JRuby, TruffleRuby, or mruby (https://github.com/postmodern/ruby-install)'
brew = 'ruby-install'
uni = 'wget https://github.com/postmodern/ruby-install/releases/download/v0.9.4/ruby-install-0.9.4.tar.gz && tar -xzvf ruby-install-0.9.4.tar.gz && cd ruby-install-0.9.4/ && sudo make install'
# fedora = 'sudo dnf copr enable sadauskas/ruby-install'
# copr = 'sadauskas/ruby-install' # pacrat should automatically then run: dnf install ruby-install
# dnfcopr = 'sadauskas/ruby-install'

# [ruby]
# doc = 'ruby the proglang'
# uni = 'ruby-install --update && ruby-install ruby'

[ruby]
doc = 'ruby the proglang'

# [pyenv]

[uv]
doc = 'an extremely fast Python package and project manager (https://github.com/astral-sh/uv)'
uni = 'curl -LsSf https://astral.sh/uv/install.sh | sh'

[fnm]
doc = 'fast and simple Node.js version manager (https://github.com/Schniz/fnm)'
brew = 'fnm'
eget = 'Schniz/fnm'
instruct = 'Set up shell completion: https://github.com/Schniz/fnm?tab=readme-ov-file#completions'
# uni = 'curl -fsSL https://fnm.vercel.app/install | bash'

[markdownlint]
doc     = 'markdown lint tool'
depcmds = 'gem'
cmd     = 'mdl'
uni = 'sudo gem install mdl'
# langmgr = 'gem' # gem pip bbin npm-g
# gem     = 'mdl'

[httpyac]
doc = 'CLI for *.http and *.rest files (https://github.com/AnWeber/httpyac)'
docker = '-it --rm -v ${PWD}:/data ghcr.io/anweber/httpyac:latest' # TODO
# Prompts to make an alias (after detecting if already exists
# uni = 'npm install -g httpyac'
# alias = "docker run -it -v ${PWD}:/data ghcr.io/anweber/httpyac:latest" # TODO

### Conveniences

[bat]
doc = 'better cat with colors'
cmd = 'bat,batcat' # TODO called batcat on ubuntu so need to treat both as indicators

[grc]
doc = 'generic command output colorizer (https://github.com/garabik/grc)'

[jq]
doc = 'like sed for JSON data (https://jqlang.github.io/jq/)'

[argc]
doc = 'bash CLI framework and command runner (https://github.com/sigoden/argc)'
eget = 'sigoden/argc'

[gh]
doc = 'bring GitHub to your terminal (https://cli.github.com/)'
brew = 'gh'
eget = 'cli/cli'

[aichat]
doc = 'all-in-one LLM CLI tool featuring Shell Assistant, Chat-REPL, RAG, AI tools & agents (https://github.com/sigoden/aichat)'
brew = 'aichat'
eget = 'sigoden/aichat'

[nushell]
doc = 'a new type of shell (https://www.nushell.sh/)'
cmd = nu
brew = 'nushell'
dnf = 'nu'
eget = 'nushell/nushell'
# FIXME ubuntu/debian are only OSs missing package, so how to specify skipping on those?
