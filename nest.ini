# pacrat nest INI config file

[eget] # bootstrap
# Likely don't need this since pacrat can install it automatically
doc     = 'easily install prebuilt binaries from GitHub (bootstrapper) (https://github.com/zyedidia/eget)'
uni = 'curl https://zyedidia.github.io/eget.sh | sh'
postop = "mv eget ~/.local/bin/"

[bbin]
doc =     'babashka bbin installer (https://github.com/babashka/bbin)'
depcmds = 'bb'
uni = 'curl -o- -L https://raw.githubusercontent.com/babashka/bbin/v0.2.4/bbin > ~/.local/bin/bbin && chmod +x ~/.local/bin/bbin'
verget  = 'bbin --version | cut -f2 -d" "'
vermin  = '0.2.0'
# deppacs = 'babashka'
# cmd =     'bbin'
# brew =    'babashka/brew/bbin'
# linux =   'curl -o- -L https://raw.githubusercontent.com/babashka/bbin/v0.2.4/bbin > ~/.local/bin/bbin && chmod +x ~/.local/bin/bbin'

[cljrep]
doc     = 'run fast Clojure unit tests'
cmd     = rep
depcmds = 'cc'
clone   = 'https://github.com/eraserhd/rep'
# build   = 'cc -g -O2 -e rep rep.c'
postop  = 'cc -g -O2 -e rep rep.c && cp rep ~/.local/bin'

[gnuutils]
osfam = macos # redhat bsd debian arch 
doc   = 'various GNU utils for macos (already on any linux)'
cmd   = 'ggrep'
brew  = 'coreutils findutils gnu-tar gnu-sed gawk gnutls gnu-indent gnu-getopt grep gdate'

[ecpg]
doc  = 'Postgres FE for sql linting'
brew = 'libpq'
dnf  = 'ecpg-devel'
apt  = 'libecpg-dev'
# cmd =  'ecpg'

[pv]
doc = 'terminal pipe viewer'
# anypac = 'pv'
# cmd = 'pv'

[clj-kondo]
doc    = 'static analyzer and linter for Clojure code that sparks joy (https://github.com/clj-kondo/clj-kondo)'
eget   = 'clj-kondo/clj-kondo'
vermin = '2024.11.14'
# details = 'https://github.com/clj-kondo/clj-kondo' # inferred
# cmd =     'clj-kondo'
# linux =   'curl -sLO https://raw.githubusercontent.com/clj-kondo/clj-kondo/master/script/install-clj-kondo && chmod +x install-clj-kondo && ./install-clj-kondo'
# brew =    'borkdude/brew/clj-kondo'
# verget =  'clj-kondo --version | cut -f2 -d" "'

[podman]
doc = 'manage containers, pods, and images (https://podman.io/)'
# anypac = 'podman'
# brew = 'podman'
# apt = 'podman'
# fedora comes with podman already installed

# [postgresql]
# docker = 

[babashka]
doc  = 'native, fast starting Clojure interpreter for scripting'
cmd  = 'bb'
eget = 'babashka/babashka'

[cljsplint]
doc = 'a Clojure linter focused on style and code shape'
details = 'repo site: https://github.com/NoahTheDuke/splint'
cmd = 'splint'
depcmds = 'bbin'
uni = 'bbin install io.github.noahtheduke/splint'
vermin = '1.10.1'
path = '~/.local/bin'

[graalvm]
doc = 'compile fast binaries'
# Set GRAALVM_HOME to the unpacked archive or add $GRAALVM_HOME/bin to your path
path0 = '~/src/graalvm/bin'

[cljfmt]
doc = 'Clojure formatter built with GraalVM'
cmd = 'cljfmt'
clone = 'https://github.com/bsless/cljfmt-graalvm'
postop = 'cd cljfmt-graalvm && ./script/compile'

[just]
doc = 'a command runner'
details = 'https://just.systems'
# cmd = 'just'
# anypac = 'just'
# With pkg these become redundant:
# brew 'just'
# dnf 'just'
# apt 'just'
# pkg 'just'
# nix 'nixos.just' # nix-env -iA just

[awscli]
doc = 'AWS CLI tools for S3 etc'
cmd = 'aws'
dnf = 'awscli2'
brew = 'awscli'

[awless]
eget 'wallix/awless'

[pgmig]
doc =     'standalone postgresql migration runner'
# details = 'https://github.com/leafclick/pgmig' # inferred
cmd =     'pgmig'
eget = 'leafclick/pgmig'
# linux =   'wget https://github.com/leafclick/pgmig/releases/download/v0.7.1/pgmig-0.7.1-linux-amd64.zip'
# macos =   'wget https://github.com/leafclick/pgmig/releases/download/v0.7.1/pgmig-0.7.1-macos_x64.zip'
# install = 'unzip pgmig-*.zip && mv pgmig ~/.local/bin'
# path =    '~/.local/bin'
vermin =  '0.7.1'

[direnv]

[ngrok]

[captain]
doc = 'a simpler approach to git-hook management'
details = 'https://github.com/MicahElliott/captain'
cmd = 'capt'
depcmds = 'macos:gdate' # simpler, doesn't need to build dependency tree
deppacs = 'gnuutils' # could just assume deps are listed in order in this file, but then this isn't even needed
# clone = 'https://github.com/MicahElliott/captain'
clone = 'gh:MicahElliott/captain' # or let `gh:` prefix be implicit
clone = 'local:~/proj/captain' # ugh, need a user override??
path = 'captain/bin' # assune under ~/src/clones or $PACRAT_CLONES
instruct = 'cd your-project-root && git config core.hooksPath .capt/hooks' # To finish setup, now run: ...

[java]
cmd = 'java'
dnf = 'java-latest-openjdk-devel'
brew = 'clojure/tools/clojure'
verget = 'java -version 2>&1| head -1 | cut -f3 -d" "'

[clojure]
doc = 'a robust, practical, and fast programming language'
details = 'https://clojure.org/'
cmd = 'clj'
depcmds = 'java'
brew = 'clojure/tools/clojure'
linux = 'curl -L -O https://github.com/clojure/brew-install/releases/latest/download/linux-install.sh && chmod +x linux-install.sh && sudo ./linux-install.sh'
# verget = '--version | cut -f4 -d" "'
vermin = '1.11'

[markdownlint]
doc     = 'markdown lint tool'
depcmds = 'gem'
# langmgr = 'gem' # gem pip bbin npm-g
cmd     = 'mdl'
# gem     = 'mdl'
uni = 'gem install mdl'

### Conveniences

[bat]
doc = 'better cat with colors'

[grc]
doc = 'generic command output colorizer (https://github.com/garabik/grc)'

[jq]
doc = 'like sed for JSON data (https://jqlang.github.io/jq/)'
